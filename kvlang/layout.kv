## WeatherFlow PiConsole: Raspberry Pi Python console for WeatherFlow Tempest
## and Smart Home Weather stations.
## Copyright (C) 2018-2023 Peter Davis

## This program is free software: you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free Software
## Foundation, either version 3 of the License, or (at your option) any later
## version.

## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
## details.

## You should have received a copy of the GNU General Public License along with
## this program. If not, see <http://www.gnu.org/licenses/>.

## =============================================================================
## TabbedPanelItem AND MainMenuLayout
## =============================================================================
<MainMenuTab@TabbedPanelItem>:
    background_normal: 'atlas://atlas/wfpiconsole/tab_btn'
    background_down: 'atlas://atlas/wfpiconsole/tab_btn_pressed'
    font_name: 'fonts/Inter-SemiBold.ttf'
    font_size: dp(14.2*app.scaleFactor)
    color: utils.rgba('#d6d6d6ff')
    canvas.after:
        Color:
            rgb: [.3,.3,.3,1]
        Rectangle:
            pos: self.right - 1, self.y
            size: 1, self.height,

<MainMenuLayout@GridLayout>:
    padding: '5dp'
    cols: 1
    canvas.after:
        Color:
            rgb: [.3,.3,.3,1]
        Rectangle:
            pos: self.x + 1, self.y + 3
            size: self.width, 1

## =============================================================================
## PanelBackground, RainfallBackground AND UpdateNotifBackground
## =============================================================================
<PanelBackground@FloatLayout>:
    _panelTitle: str()
    _panelStatus: str()
    pos_hint: {'x': 0/262, 'y': 0/202}
    size_hint: [1, 1]
    cols: 1
    canvas.before:
        Color:
            rgba: utils.rgba('ffffffff')
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: (app.scaleFactor*2, app.scaleFactor*2)
        Color:
            rgba: utils.rgba('000000ff')
        Rectangle:
            pos: self.x+dp(app.scaleFactor), self.y+dp(app.scaleFactor)
            size: self.width-dp(app.scaleFactor*2), self.height-dp(app.scaleFactor*2)
    PanelTitle:
        id: Title
        text: root._panelTitle
    PanelStatus:
        id: Status
        text: root._panelStatus

<RainfallBackground@FloatLayout>:
    _panelTitle: str()
    _panelStatus: str()
    pos_hint: {'x': 0/262, 'y': 47/202}
    size_hint: [1, 155/202]
    cols: 1
    canvas.before:
        Color:
            rgba: utils.rgba('ffffffff')
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: (app.scaleFactor*2, app.scaleFactor*2)
        Color:
            rgba: utils.rgba('000000ff')
        Rectangle:
            pos: self.x+dp(app.scaleFactor), self.y+dp(app.scaleFactor)
            size: self.width-dp(app.scaleFactor*2), self.height-dp(app.scaleFactor*2)
    PanelTitle:
        id: Title
        size_hint: (1, 13/155)
        pos_hint: {'x': 0, 'y': 138/155}
        text: root._panelTitle
    PanelStatus:
        id: Status
        size_hint: (0.97, 23 / 155)
        pos_hint: {'x': 0.015, 'y': 133 / 155}
        text: root._panelStatus

<UpdateNotifBackground@BoxLayout>:
    _panelTitle: str()
    pos_hint: {'x': 0, 'y': 0}
    size_hint: [1, 1]
    cols: 1
    canvas.before:
        Color:
            rgba: utils.rgba('f05e40ff')
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: (app.scaleFactor*2, app.scaleFactor*2)
        Color:
            rgba: utils.rgba('141414ff')
        Rectangle:
            pos: self.x+dp(app.scaleFactor), self.y+dp(app.scaleFactor)
            size: self.width-dp(app.scaleFactor*2), self.height-dp(app.scaleFactor*2)
    PanelTitle:
        pos_hint: {'x': 0, 'y': 59/76}
        size_hint: (1, 13/76)
        text: root._panelTitle

# ==============================================================================
# station_status BOX LAYOUT
# ==============================================================================
<station_status>:
    orientation: 'vertical'
    BoxLayout:
        orientation: 'vertical'
        padding: [dp(0),dp(0),dp(0),dp(10)]
        size_hint: (1,.44)
        MenuField:
            font_size: dp(16*app.scaleFactor)
            text: app.config['Station']['Name']
        MenuField:
            text: 'Station status: ' + app.CurrentConditions.Status['station_status']
    GridLayout:
        cols: 2
        padding: [dp(0),dp(0),dp(0),dp(10)]
        size_hint: (1,.56)
        MenuField:
            text: 'Station time: ' + app.CurrentConditions.System['Time']
        MenuField:
            text: 'Station elevation: ' + '{:.2f}'.format(float(app.config['Station']['Elevation'])) + ' m'
        MenuField:
            text: 'Station latitude: ' + '{:.4f}'.format(float(app.config['Station']['Latitude'])) + '\u00B0'
        MenuField:
            text: 'Station Longitude: ' + '{:.4f}'.format(float(app.config['Station']['Longitude'])) + '\u00B0'
        MenuField:
            text: 'Hub firmware: ' + app.CurrentConditions.Status['hub_firmware']
        MenuField:
            text: 'Console version: [color=00a4b4ff]' + app.config['System']['Version'] + '[/color]'

# ==============================================================================
# station_selector BOX LAYOUT
# ==============================================================================
<station_selector>:
    orientation: 'vertical'
    Label:
        text: 'Station & Device selection'
        font_size: dp(16*app.scaleFactor)
        font_name: 'fonts/Inter-Bold.ttf'
        color: utils.rgba('#c8c8c8ff')
        size_hint: (1, .4)
    BoxLayout:
        orientation: 'horizontal'
        spacing: dp(10)
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Station'
                font_size: dp(14*app.scaleFactor)
                font_name: 'fonts/Inter-Bold.ttf'
                color: utils.rgba('#c8c8c8ff')
            FloatLayout:
                StationSpinner:
                    id: station_dropdown
                    values: app.mainMenu.station_list
                    on_text: app.mainMenu.get_station_devices()
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Tempest'
                font_size: dp(14*app.scaleFactor)
                font_name: 'fonts/Inter-Bold.ttf'
                color: utils.rgba('#c8c8c8ff')
            FloatLayout:
                DeviceSpinner:
                    id: tempest_dropdown
                    values: app.mainMenu.tempest_list
                    on_text: if self.text not in ['Please select', 'Air or Sky selected', 'No device available']: app.mainMenu.on_device_selection(self)
    BoxLayout:
        orientation: 'horizontal'
        spacing: dp(10)
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Sky'
                font_size: dp(14*app.scaleFactor)
                font_name: 'fonts/Inter-Bold.ttf'
                color: utils.rgba('#c8c8c8ff')
            FloatLayout:
                DeviceSpinner:
                    id: sky_dropdown
                    values: app.mainMenu.sky_list
                    on_text: if self.text not in ['Please select', 'Tempest selected', 'No device available']: app.mainMenu.on_device_selection(self)
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Outdoor Air'
                font_size: dp(14*app.scaleFactor)
                font_name: 'fonts/Inter-Bold.ttf'
                color: utils.rgba('#c8c8c8ff')
            FloatLayout:
                DeviceSpinner:
                    id: out_air_dropdown
                    values: app.mainMenu.out_air_list
                    on_text: if self.text not in ['Please select', 'Tempest selected', 'No device available']: app.mainMenu.on_device_selection(self)
    BoxLayout:
        orientation: 'horizontal'
        spacing: dp(10)
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Indoor Air'
                font_size: dp(14*app.scaleFactor)
                font_name: 'fonts/Inter-Bold.ttf'
                color: utils.rgba('#c8c8c8ff')
            FloatLayout:
                DeviceSpinner:
                    id: in_air_dropdown
                    values: app.mainMenu.in_air_list
                    on_text: if self.text not in ['Please select', 'Tempest selected', 'No device available']: app.mainMenu.on_device_selection(self)
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Switch Station/Device'
                font_size: dp(14*app.scaleFactor)
                font_name: 'fonts/Inter-Bold.ttf'
                color: utils.rgba('#c8c8c8ff')
            SwitchButton:
                id: switch_button
                disabled: 1
                text: 'Fetching all available stations'
                on_release: app.mainMenu.switch_stations()

# =============================================================================
# [device]_status PANEL
# =============================================================================
<tempest_status>:
    size_hint: (1,.1)
    orientation: 'horizontal'
    StatusField:
        size_hint: (.15,1)
        text: 'TEMPEST'
    StatusField:
        size_hint: (.12,1)
        text: app.CurrentConditions.Status['tempest_status']
    StatusField:
        size_hint: (.22,1)
        text: app.CurrentConditions.Status['tempest_sample_time']
    StatusField:
        size_hint: (.20,1)
        text: app.CurrentConditions.Status['tempest_voltage']
    StatusField:
        size_hint: (.31,1)
        text: app.CurrentConditions.Status['tempest_ob_count']

<sky_status>:
    size_hint: (1,.1)
    orientation: 'horizontal'
    StatusField:
        size_hint: (.15,1)
        text: 'SKY'
    StatusField:
        size_hint: (.12,1)
        text: app.CurrentConditions.Status['sky_status']
    StatusField:
        size_hint: (.22,1)
        text: app.CurrentConditions.Status['sky_sample_time']
    StatusField:
        size_hint: (.20,1)
        text: app.CurrentConditions.Status['sky_voltage']
    StatusField:
        size_hint: (.31,1)
        text: app.CurrentConditions.Status['sky_ob_count']

<out_air_status>:
    size_hint: (1,.1)
    orientation: 'horizontal'
    StatusField:
        size_hint: (.15,1)
        text: 'Outdoor AIR'
    StatusField:
        size_hint: (.12,1)
        text: app.CurrentConditions.Status['out_air_status']
    StatusField:
        size_hint: (.22,1)
        text: app.CurrentConditions.Status['out_air_sample_time']
    StatusField:
        size_hint: (.20,1)
        text: app.CurrentConditions.Status['out_air_voltage']
    StatusField:
        size_hint: (.31,1)
        text: app.CurrentConditions.Status['out_air_ob_count']

<in_air_status>:
    size_hint: (1,.1)
    orientation: 'horizontal'
    StatusField:
        size_hint: (.15,1)
        text: 'Indoor AIR'
    StatusField:
        size_hint: (.12,1)
        text: app.CurrentConditions.Status['in_air_status']
    StatusField:
        size_hint: (.22,1)
        text: app.CurrentConditions.Status['in_air_sample_time']
    StatusField:
        size_hint: (.20,1)
        text: app.CurrentConditions.Status['in_air_voltage']
    StatusField:
        size_hint: (.31,1)
        text: app.CurrentConditions.Status['in_air_ob_count']

## =============================================================================
## WIND ROSE LAYOUT
## =============================================================================
<windRose@FloatLayout>:
    _width: 3.0
    pos_hint: {'x': 65/262, 'y': 26/202}
    size_hint: (134/262, 134/202)
    canvas.before:
        Color:
            rgba: utils.rgba('c8c8c8ff')
        SmoothLine:
            width: 3.0*app.scaleFactor
            ellipse: (self.x+self._width*app.scaleFactor, self.y+self._width*app.scaleFactor, self.width-(self._width*2*app.scaleFactor), self.height-(self._width*2*app.scaleFactor), -45, 45, 1000)
        SmoothLine:
            width: 3.0*app.scaleFactor
            ellipse: (self.x+self._width*app.scaleFactor, self.y+self._width*app.scaleFactor, self.width-(self._width*2*app.scaleFactor), self.height-(self._width*2*app.scaleFactor), 135, 225, 1000)
        Color:
            rgba: utils.rgba('646464ff')
        SmoothLine:
            width: 3.0*app.scaleFactor
            ellipse: (self.x+self._width*app.scaleFactor, self.y+self._width*app.scaleFactor, self.width-(self._width*2*app.scaleFactor), self.height-(self._width*2*app.scaleFactor), 45, 135, 1000)
        SmoothLine:
            width: 3.0*app.scaleFactor
            ellipse: (self.x+self._width*app.scaleFactor, self.y+self._width*app.scaleFactor, self.width-(self._width*2*app.scaleFactor), self.height-(self._width*2*app.scaleFactor), 225, 315, 1000)

## =============================================================================
## MOON ROSE LAYOUT
## =============================================================================
<moonRose@FloatLayout>:
    _width: 3.0
    pos_hint: {'x': 64/262, 'y': 25/202}
    size_hint: (134/262, 134/202)
    canvas.after:
        Color:
            rgba: utils.rgba('646464ff')
        SmoothLine:
            width: 3.0*app.scaleFactor
            ellipse: (self.x+self._width*app.scaleFactor, self.y+self._width*app.scaleFactor, self.width-(self._width*2*app.scaleFactor), self.height-(self._width*2*app.scaleFactor), 0, 360, 4000)

## =============================================================================
## BAROMETER DIAL LAYOUT
## =============================================================================
<barometerDial@FloatLayout>:
    _width: 3.0
    pos_hint: {'x': 46/262, 'y': -66/202}
    size_hint: (168/262, 168/202)
    canvas.after:
        Color:
            rgba: utils.rgba('646464ff')
        SmoothLine:
            width: 3.0*app.scaleFactor
            ellipse: (self.x+self._width*app.scaleFactor, self.y+self._width*app.scaleFactor, self.width-(self._width*2*app.scaleFactor), self.height-(self._width*2*app.scaleFactor), -90, 90, 2000)

## =============================================================================
## RAIN GAUGE LAYOUT
## =============================================================================
<RainGauge@FloatLayout>:
    _width: 41
    _height: 118

    # Gauge text
    TitleField:
        text: 'Rain Rate'
        pos_hint: {'x': -16 / root._width, 'y': 54 / root._height}
        size_hint_x: (70 / root._width)
        color: utils.rgba('#807e76ff')
        canvas.before:
            PushMatrix
            Rotate:
                angle: 90
                origin: self.center
        canvas.after:
            PopMatrix

    # Gauge shape
    Widget:
        pos_hint: {'x': 0, 'y': (root._height - 1) / root._height}
        size_hint: [4 / root._width, 1 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('646464ff')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 3 / root._width, 'y': 0}
        size_hint: [1 / root._width, 1]
        canvas.after:
            Color:
                rgba: utils.rgba('646464ff')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 3 / root._width, 'y': 0}
        size_hint: [(root._width - 6) / root._width, 1 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('646464ff')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 4) / root._width, 'y': 0}
        size_hint: [1 / root._width, 1]
        canvas.after:
            Color:
                rgba: utils.rgba('646464ff')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 4) / root._width, 'y': (root._height - 1) / root._height}
        size_hint: [4 / root._width, 1 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('646464ff')
            Rectangle:
                pos: self.pos
                size: self.size

    # Gauge increments left-hand side (top set)
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 110.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('f05e40b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 103.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('e06247b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 96.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('d0674fb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 89.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('c06c57b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 82.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('b0705eb2')
            Rectangle:
                pos: self.pos
                size: self.size

    # Gauge increments left-hand side (middle set)
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 75.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('a07566b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 68.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('907a6eb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 61.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('807e76b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 54.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('70837db2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 47.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('608885b2')
            Rectangle:
                pos: self.pos
                size: self.size

    # Gauge increments left-hand side (bottom set)
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 40.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('508c8db2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 33.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('409195b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 26.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('30969cb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 19.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('209aa4b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 12.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('109facb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': 4 / root._width, 'y': 5.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('00a4b4b2')
            Rectangle:
                pos: self.pos
                size: self.size

    # Gauge increments right-hand side (top set)
    Widget:
        pos_hint: {'x': (root._width - 12) / root._width, 'y': 110.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('f05e40b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 103.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('e06247b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 96.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('d0674fb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 89.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('c06c57b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 82.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('b0705eb2')
            Rectangle:
                pos: self.pos
                size: self.size

    # Gauge increments right-hand side (middle set)
    Widget:
        pos_hint: {'x': (root._width - 12) / root._width, 'y': 75.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('a07566b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 68.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('907a6eb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 61.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('807e76b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 54.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('70837db2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 47.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('608885b2')
            Rectangle:
                pos: self.pos
                size: self.size

    # Gauge increments right-hand side (bottom set)
    Widget:
        pos_hint: {'x': (root._width - 12) / root._width, 'y': 40.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('508c8db2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 33.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('409195b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 26.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('30969cb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 19.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('209aa4b2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 8) / root._width, 'y': 12.5 / root._height}
        size_hint: [4 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('109facb2')
            Rectangle:
                pos: self.pos
                size: self.size
    Widget:
        pos_hint: {'x': (root._width - 12) / root._width, 'y': 5.5 / root._height}
        size_hint: [8 / root._width, 2.5 / root._height]
        canvas.after:
            Color:
                rgba: utils.rgba('00a4b4b2')
            Rectangle:
                pos: self.pos
                size: self.size
